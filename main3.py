from jwt_manager import JWTManager
import time
import hashlib

def hash_username(username: str) -> str:
    # Convert to bytes
    username_bytes = username.encode('utf-8')

    # Choose a hash function: SHA-256 is a good default
    hash_object = hashlib.sha256(username_bytes)

    # Get the hex digest
    return hash_object.hexdigest()

secret_key = "ea47937bdc859cb3287cf0a383405d1d0b99315e82e64d7184520a6d68f70c90"

# Create manager instance with autogenerated secret
manager = JWTManager()

# Simulate owner (e.g., hashed username)
owner = hash_username("user123")

# Create JWT token
token = JWTManager.create_token(owner=owner, secret_key=manager.secret_key, additional_claims={"pubkey": "a"})

print("\n🧪 Created Token:")
print(token)

# Simulate waiting time (optional)
# time.sleep(1)

# Decode and validate
try:
    payload = JWTManager.decode_token(token, secret_key=manager.secret_key)
    print("\n✅ Token is valid. Decoded payload:")
    print(payload)
except Exception as e:
    print("\n❌ Token validation failed:", e)

# Check if token is valid (bool)
is_valid = JWTManager.is_token_valid(token, secret_key=manager.secret_key)
print(f"\n🔍 is_token_valid(): {is_valid}")
